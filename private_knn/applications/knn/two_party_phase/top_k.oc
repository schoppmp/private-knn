#include <stdio.h>

#include "copy.oh"
#include "obliv.oh"
#include "top_k.h"

void top_k_oblivc(void* vargs) {
  knn_oblivc_args* args = vargs;

  obliv uint8_t* inputs =
      calloc(args->num_elements * args->value_size, sizeof(obliv uint8_t));
  obliv uint8_t* inputs_b =
      calloc(args->num_elements * args->value_size, sizeof(obliv uint8_t));
  obliv uint8_t* norms_a =
      calloc(args->num_elements * args->value_size, sizeof(obliv uint8_t));
  obliv uint8_t* norm_b = calloc(args->value_size, sizeof(obliv uint8_t));
  feedOblivCharArray(inputs, args->serialized_inputs,
                     args->value_size * args->num_elements, 1);
  feedOblivCharArray(norms_a, args->serialized_norms,
                     args->value_size * args->num_elements, 1);
  feedOblivCharArray(inputs_b, args->serialized_inputs,
                     args->value_size * args->num_elements, 2);
  feedOblivCharArray(norm_b, args->serialized_norms, args->value_size, 2);

  for (int i = 0; i < args->num_elements; i++) {
    // Add up shares.
    __obliv_c__setPlainAdd(
        &inputs[i * args->value_size], &inputs[i * args->value_size],
        &inputs_b[i * args->value_size], 8 * args->value_size);

    // TODO: We can replace these divisions with multiplications and use
    //   additive sharing which is faster.

    // Divide by norm of A's document i.
    __obliv_c__setDivUnsigned(
        &inputs[i * args->value_size], &inputs[i * args->value_size],
        &norms_a[i * args->value_size], 8 * args->value_size);
    // Divide by norm of B's document.
    __obliv_c__setDivUnsigned(&inputs[i * args->value_size],
                              &inputs[i * args->value_size], norm_b,
                              8 * args->value_size);
  }

  uint64_t *inputs_clear = calloc(args->num_elements, sizeof(uint64_t));
  revealOblivLLongArray(inputs_clear, inputs, args->num_elements, 0);
  for(int i = 0; i < args->num_elements; i++) {
    printf(" %d", inputs_clear[i]);
  }
  printf("\n");


  obliv int* topk_indices = calloc(args->num_selected, sizeof(obliv int));
  obliv uint8_t* topk_values =
      calloc(args->num_selected * args->value_size, sizeof(obliv uint8_t));
  // ignore makes sure we only copy each value once to the top-k.
  obliv bool* ignore = calloc(args->num_elements, sizeof(obliv bool));
  OcCopy cpy_value = ocCopyCharN(args->value_size);
  for (int j = 0; j < args->num_selected; j++) {
    obliv bool is_empty = 1;
    for (int i = 0; i < args->num_elements; i++) {
      obliv bool is_nearer = 0;
      __obliv_c__setLessThanUnsigned(
          &is_nearer, &topk_values[j * args->value_size],
          &inputs[i * args->value_size], 8 * args->value_size);
      obliv
      if ((is_nearer | is_empty) & (ignore[i] == 0)) {
        is_empty = 0;
        ocCopy(&cpy_value, &topk_values[j * args->value_size],
               &inputs[i * args->value_size]);
        topk_indices[j] = i;
      }
    }
    for (int i = 0; i < args->num_elements; i++) {
      obliv if(i == topk_indices[j]) {
        ignore[i] = 1;
      }
    }
  }

  // TODO: Actually, we want to secret-share the values and corresponding
  //   classes (for top-k classification). This is good enough for testing
  //   though.
  revealOblivIntArray(args->result, topk_indices, args->num_selected, 2);
  revealOblivIntArray(args->result, topk_indices, args->num_selected, 1);

  free(topk_indices);
  free(topk_values);
  free(inputs);
  free(inputs_b);
  free(norms_a);
  free(norm_b);
  free(ignore);
}
